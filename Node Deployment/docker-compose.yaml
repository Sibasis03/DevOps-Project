version: '3'
services:
  app:
    image: ${DOCKER_COMPOSE_IMAGE_NAME}
    container_name: "${CONTAINER_NAME}"
    environment:
      INFISICAL_TOKEN: ${INFISICAL_TOKEN}
      INFISICAL_API_URL: ${INFISICAL_API_URL}
      PROJECT_ID: ${PROJECT_ID}
    ports:
      - "127.0.0.1:${APP_PORT}:3000"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${APP_PORT} || exit 1"] 
      interval: 10s
      timeout: 5s
      start_period: 10s
    networks:
      - mern_network
  postgresql:
    image: "postgres:17-alpine3.21"
    container_name: "${CONTAINER_NAME}-postgresql"
    environment:
      - "POSTGRES_USER=${DATABASE_USER}"
      - "POSTGRES_PASSWORD=${DATABASE_PASSWORD}"
      - "POSTGRES_DB=${DATABASE_NAME}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    restart: always
    networks:
      - backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME} -h localhost -p 5432",
        ]
      start_period: 5s
      interval: 10s
      timeout: 5s

networks:
  mern_network:
    driver: bridge 
    name: "${CONTAINER_NAME}--network"

volumes:
  postgres-data:
    driver: local  
    name: "${CONTAINER_NAME}--volume"